(bin, elf, proc, sys, util) -> {

    ptr_new = bin.u64(0)
    ptr_t = util.type(ptr_new)

    list_new = {
        :value: ptr_new
        :next:  ptr_new
    }
    list_t = util.type(list_new)

    bss = {
        :counter: bin.u64(0)
        :my_foo_list: list_new
    }

    data = {
        :verbose: bin.u8(0)
    }

    rodata = {
        :hello_world: = util.utf8("Hello, world!\n")
        :bye:         = util.utf8("bye!\n")
    }

"
I imagine this might be like:

    sub2 = (code) -> (addr) -> {
        call = (arg1, arg2) -> call2(addr, arg1, arg2)
        start()
        code("[rbp+16]", "[rbp+24]")
        ret()
    }

meanwhile, this *could* stay as it is, because the logic might be that
any function gets applied to an address, and any block is just inlined
ignoring the address.

        :hello_world: = util.utf8('Hello, world!\n')

so ':L: = X' syntax would work where X is Block or (Num)->Block
"

    text = (rodata, data, bss) -> {

        :print: proc.sub2((addr, size) -> {
            sys.write(sys.fd_stdout, addr, size)
        })

        :start: {
            print.call(rodata.hello_world, rodata.hello_world.size)
            sys.exit(0)
        }
    }

    elf.linux_x64(rodata, data, bss, text)
}
